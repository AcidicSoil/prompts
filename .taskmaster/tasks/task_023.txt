# Task ID: 23
# Title: Execute and Verify CLI Distribution Workflow
# Status: pending
# Dependencies: 21, 22
# Priority: high
# Description: Execute the end-to-end CLI distribution workflow documented in Task 22, performing all steps locally to validate the instructions and ensure the package is ready for a real npm publish.
# Details:
This task involves a full dry-run of the CLI publishing and installation lifecycle to prove the documentation from Task 22 is accurate and the package is configured correctly. Follow the 'CLI Distribution and Usage' section of README.md.

1.  **Build the Project:** Start by ensuring the project compiles correctly. Run `npm run build`. This should create the distributable JavaScript files in the `dist/` directory, including the CLI entry point at `dist/bin/prompts.js`.

2.  **Local Development Simulation (`npm link`):**
    *   Execute `npm link` in the project root. This will create a global symlink to your local project, making the `prompts-cli` command (as defined in `package.json`'s `bin` field) available system-wide.
    *   Open a new terminal session (to ensure the path is updated) and run `prompts-cli --version` and `prompts-cli list`. Confirm they execute without errors.
    *   When finished, run `npm unlink` to remove the symlink.

3.  **Package Validation (`npm pack`):**
    *   Run `npm pack`. This command creates a gzipped tarball (`.tgz`) just as it would for publishing. This is a critical step to verify that the `files` array in `package.json` is correct and that no sensitive or unnecessary files (like `src/` or `.env`) are included.

4.  **Publish Simulation (`npm publish --dry-run`):**
    *   Execute `npm publish --dry-run`. This will perform all the pre-publish checks and show a summary of the package contents that would be uploaded to the npm registry, without actually publishing.

5.  **Local Installation Test:**
    *   Create a new empty directory outside of the project (e.g., `~/cli-test`).
    *   From within that new directory, install the package from the tarball created in step 3: `npm install /path/to/project/your-package-name-1.0.0.tgz`.
    *   Verify you can run the command via `./node_modules/.bin/prompts-cli`.

6.  **Global Installation Test:**
    *   Run `npm install -g /path/to/project/your-package-name-1.0.0.tgz` to simulate a global install for an end-user.
    *   Open a new terminal and execute `prompts-cli list` to confirm it works globally.
    *   Clean up by running `npm uninstall -g <package-name>`.

7.  **Documentation Feedback:** If any of these steps fail or the instructions in `README.md` are unclear, update the documentation as part of this task.

# Test Strategy:
The successful completion of this task is the test itself. To verify:
1. Confirm that `npm link` followed by running `prompts-cli list` in a new shell session executes successfully.
2. Inspect the contents of the tarball generated by `npm pack` to ensure it only contains production files (`dist`, `package.json`, `README.md`, etc.) and not source files (`src`).
3. Review the output of `npm publish --dry-run` to confirm there are no errors and the file list is correct.
4. Provide evidence that installing the package tarball (both locally to a new project and globally with `-g`) results in a functioning CLI.
5. If any documentation changes were required, they must be included in the final pull request. If no changes were needed, a comment confirming the successful validation of all documented steps is required.

# Subtasks:
## 1. Run local build and direct CLI smoke tests [pending]
### Dependencies: None
### Description: Execute `npm run build` and invoke the CLI via `node dist/cli/main.js` for representative commands to confirm local output matches expectations. Capture results and note any issues.
### Details:


## 2. Validate npm link workflow [pending]
### Dependencies: None
### Description: Use `npm link` to create a global symlink for the CLI, link it into a sample consumer project, exercise key commands, and then clean up with `npm unlink`. Record commands and outcomes.
### Details:


## 3. Perform publish prep dry run [pending]
### Dependencies: None
### Description: Review package metadata, bump a prerelease version (or note skipped), run `npm pack` to inspect the tarball, and document provenance/OTP requirements without publishing. Summarize readiness in notes.
### Details:


## 4. Plan global publish and support steps [pending]
### Dependencies: None
### Description: Outline the exact `npm publish` command (with flags), post-publish verification on npmjs.com, global installation instructions for users, and update/rollback procedures. Hold actual publish until approvals allow.
### Details:


