{
	"meta": {
		"generatedAt": "2025-09-20T18:57:22.722Z",
		"tasksAnalyzed": 1,
		"totalTasks": 21,
		"analysisCount": 1,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 21,
			"taskTitle": "Provide CLI surface for prompts workflow",
			"complexityScore": 4,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Based on your analysis of the codebase, implement the CLI for the prompts workflow. Create a new executable file `bin/prompts.ts`.\n\n1.  **Setup Framework:** Add `commander` as a dependency and configure it in `bin/prompts.ts` to be the command router. Add a `bin` entry in `package.json` pointing to this new file, and an npm script `\"prompts\": \"tsx ./bin/prompts.ts\"` for easy execution.\n2.  **Implement Read-Only Commands:**\n    *   **`list`**: Reuse the logic from the `export_task_list` tool found in `src/tools.ts`. By default, format the output as a human-readable table using `console.table`. If a `--json` flag is present, output the raw JSON.\n    *   **`refresh`**: Create a command that programmatically executes the existing `scripts/validate_metadata.ts` and `scripts/build_catalog.ts` scripts in sequence. You can use a library like `execa` to invoke them via `tsx` and stream their output to the console.\n    *   **`export`**: Create a command that reuses the logic from the `export_task_list` tool in `src/tools.ts` and prints the resulting JSON to stdout.\n3.  **Implement State-Mutating Command:**\n    *   **`advance <id>`**: Create a command that accepts a prompt `id` and optional arguments for outputs and artifacts. Import and use the `advance_state` logic from `src/tools.ts` and the `StateStore` from `src/state.ts` to update the `.mcp/state.json` file.\n4.  **Documentation:** Update `README.md` with a new section documenting the CLI commands, their arguments, and example usage, including the `npm run prompts -- ...` invocation pattern.",
			"reasoning": "The complexity is low-to-moderate (4/10) because the core business logic for all required features already exists in a well-decoupled and reusable state. The `export_task_list` tool (Task 8) provides the logic for `export` and `list`. The `advance_state` tool (Task 7) and `StateStore` class provide the logic for state mutation. The metadata validation and catalog build processes are already encapsulated in standalone scripts (`scripts/validate_metadata.ts`, `scripts/build_catalog.ts`) as confirmed by Task 10. The main effort is greenfield plumbing: adding the `commander` library, creating the `bin/prompts.ts` entry point, wiring commands to the existing functions/scripts, and handling CLI-specific concerns like argument parsing and output formatting (`--json` vs. human-readable). No significant refactoring is required. The task is primarily about creating a new interface for existing functionality."
		}
	]
}